;;;;;;1
;;função dobro :numero->numero
(define (dobro x)
  (* 2 x))
;;função map: func: num->num lista -> numero
(define (e-map func lista)
  (cond
    [(empty? lista) empty]
    [else (cons (func (first lista)) (e-map func (rest lista)))]))

(check-expect (e-map dobro (list 1 2 3 4 5)) (list 2 4 6 8 10))
;b primeiro-simbolo: lista-simbolo -> simbolo
(define (primeiro-simbolo lista)
  (cond
    [(empty? lista) 'ListaSemSimbolo]
    [(symbol? (first lista)) (first lista)]
    [else (primeiro-simbolo (rest lista))]))
(define (projeta func lista)
  (cond
    [(empty? lista) empty]
    [else (cons (primeiro-simbolo (first lista)) (projeta func (rest lista)))]))
(check-expect (projeta primeiro-simbolo (list (list 'a 'b) (list ) (list 'c 'd 'e))) (list 'a 'ListaSemSimbolo 'c))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Questão 2
(define (soma-3 x y z)
  (+ x y z))
(define (soma-3.2 x y z)
  (+ x (+ y z)))
(define (produto-3 x y z)
  (* x y z))

(define (mesmo-resultado? func1 func2)
  (cond
    [(= (func1 1 3 5) (func2 1 3 5)) true]
    [else false]))
(check-expect (mesmo-resultado? soma-3 soma-3.2) true)
(check-expect (mesmo-resultado? produto-3 soma-3.2) false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Questão 3
;; sierpinski : .......... ............ ............ -> true
;; desenha um triângulo de Sierpinski com vértices nos 3 pontos passados como
;; argumentos, e devolve true. Se triângulo passado como argumento tiver
;; dimensões muito pequenas, nada é desenhado.
(define (sierpinski a b c)
  (cond
    [(too-small? a b c) true]
    [else
     (local ((define a-b (mid-point a b))
             (define b-c (mid-point b c))
             (define c-a (mid-point a c)))
       (and
        (draw-triangle a b c) (sierpinski a a-b c-a)  (sierpinski b a-b b-c) (sierpinski c c-a b-c)))]))
;; mid-point : Posn Posn -> Posn
;; computa o ponto médio entre os 2 pontos passados como argumentos
;; exemplos: ...
(define (mid-point a-posn b-posn)
  (make-posn
   (mid (posn-x a-posn) (posn-x b-posn))
   (mid (posn-y a-posn) (posn-y b-posn))))
;; mid : Number Number -> Number
;; computa a média entre os números passados como argumento
;; exemplos: ...
(define (mid a b)
  (/ (+ a b) 2))
;; draw-triangle : Posn Posn Posn -> true
;; ...
(define (draw-triangle a b c)
  (and (draw-solid-line a  b 'red) (draw-solid-line c  b 'red) (draw-solid-line a  c 'red)))
;; too-small? : Posn Posn Posn -> Boolean
(define (too-small? a b c)
  (cond
    [(< (posn-size a b) 5) true]
    [else false]))

(define (posn-size x1 x2)
  (sqrt (+ (sqr (- (posn-x x2) (posn-x x1))) (sqr (- (posn-y x1) (posn-y x2)))))) 
;;(start 400 400)  
(define A (make-posn 200 0))
(define B (make-posn 27 300))
(define C (make-posn 373 300))
;;(sierpinski A B C)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-struct bola (x y incr-x incr-y))
;; Um elemento bola de Bola é uma estrutura
;; (make-bola x y incr-x incr-y)
;; onde x, y, incr-x e incr-y são do tipo Número




(define (desenha-e-apaga uma-bola)
  (and
   (draw-solid-disk (make-posn (bola-x uma-bola)
                               (bola-y uma-bola))
                    RAIO COR)
   (sleep-for-a-while ESPERA)
   (clear-solid-disk (make-posn (bola-x uma-bola)
                                (bola-y uma-bola))
                     RAIO COR)))

(define (move-bola uma-bola)
  (make-bola (+ (bola-x uma-bola)
                (bola-incr-x uma-bola))
             (+ (bola-y uma-bola)
                (bola-incr-y uma-bola))
             (bola-incr-x uma-bola)
             (bola-incr-y uma-bola)))

;;Faz a bola andar conforme as regras
(define (move-até-que-fora uma-bola)
  (cond
    
    
    [(and (>= 0 (- (bola-x uma-bola) RAIO)) (> 0 (bola-incr-x uma-bola))) (faz-ação-bola (make-bola  (bola-x uma-bola) (bola-y uma-bola) (* -1 (bola-incr-x uma-bola))(bola-incr-y uma-bola)))]
    [(and (<= LARG (+ (bola-x uma-bola) RAIO)) (< 0 (bola-incr-x uma-bola))) (faz-ação-bola (make-bola  (bola-x uma-bola) (bola-y uma-bola) (* -1 (bola-incr-x uma-bola))(bola-incr-y uma-bola)))]
    [(and (>= 0 (- (bola-y uma-bola) RAIO)) (> 0 (bola-incr-y uma-bola))) (faz-ação-bola (make-bola  (bola-x uma-bola)(bola-y uma-bola)  (bola-incr-x uma-bola) (* -1(bola-incr-y uma-bola))))]
    [(<= ALT (+ (bola-y uma-bola) RAIO)) true]
    [else (faz-ação-bola uma-bola)]))

(define (faz-ação-bola uma-bola)
  (and (desenha-e-apaga uma-bola)
              (move-até-que-fora (move-bola uma-bola))))
;; Dimensão da tela
(define LARG 500)
(define ALT 500)
;; Dimensão e cor da bola
(define RAIO 10)
(define COR 'red)
;; Duração da espera
(define ESPERA .01)
;; Cria a tela, movimenta bola até ela cair e pára
(start LARG ALT)
(define uma-bola (make-bola 20 20 5 +1))

(move-até-que-fora (make-bola 1 1 -5 -1))
(stop)


