(define MAX_HEIGHT 500)
(define MAX_WIDTH 500)

(define-struct meteor(cord diameter deltax deltay color))
(define-struct building(cordx weidth height color damaged))
(define-struct scenario (lsm lsb)) 

(define (draw-scenario scenario)
  (and (draw-meteors (scenario-lsm scenario)) (draw-buildings (scenario-lsb scenario)) (sleep-for-a-while 0.01)
       (clean-meteors (scenario-lsm scenario))))

(define (draw-meteors lsm) 
  (cond
    [(empty? lsm) true]
    [else (local ((define meteor(first lsm)))
          (and  (draw-solid-disk (meteor-cord meteor) (/ (meteor-diameter meteor) 2) (meteor-color meteor))
                (draw-meteors (rest lsm))))]))

(define (clean-meteors lsm) 
  (cond
    [(empty? lsm) true]
    [else (local ((define meteor(first lsm)))
          (and  (draw-solid-disk (meteor-cord meteor) (+(/ (meteor-diameter meteor) 2)1) 'white)
                (clean-meteors (rest lsm))))]))

(define (draw-buildings lsb)
  (cond
    [(empty? lsb) true]
    [else (local ((define building(first lsb)))
          (cond
          [(boolean=? true (building-damaged building)) (draw-buildings (rest lsb))]
                
          [else(and  (draw-solid-rect  (make-posn (building-cordx building) (- MAX_HEIGHT (building-height building))) (building-weidth building)
                                                                        (building-height building) (building-color building))
                (draw-buildings (rest lsb)))]))]))

(define (avança-estado lsm)
  (cond
    [(empty? lsm) empty]
    [else (local ( (define meteor (first lsm)) (define position(meteor-cord meteor)))
            (cons (make-meteor (make-posn (+ (posn-x position) (meteor-deltax (first lsm))) (+ (posn-y position) (meteor-deltay (first lsm))))
                               (meteor-diameter meteor) (meteor-deltax meteor) (meteor-deltay meteor) (meteor-color meteor))
                  (avança-estado (rest lsm))))]))

(define (colidiu? scenario)
   (make-scenario (avança-estado (colidiu-meteors (scenario-lsm scenario) (scenario-lsb scenario))) 
                       (colide-buildings  (scenario-lsm scenario) (scenario-lsb scenario))))

;;percoore todos os meteoros pra ver se algum colidiu com algum predio e

(define (colidiu-meteors lsm lsb)
  (cond
    [(empty? lsm) empty]
    [(colide-meteoro-algum-predio (first lsm) lsb) (colidiu-meteors (rest lsm) lsb)]
    [else (cons (first lsm) (colidiu-meteors (rest lsm) lsb))]))
;;ve se o meteoro bateu em algum predio ou saiu da tela
(define (colide-meteoro-algum-predio meteor lsb)
  (cond
    [(empty? lsb) false]
    [(dentro? (make-posn (building-cordx (first lsb)) MAX_HEIGHT) (building-height (first lsb)) (building-weidth (first lsb)) (meteor-cord meteor)) true]
    [(or (not(> MAX_HEIGHT (posn-x (meteor-cord meteor)) 0)) (not(> MAX_HEIGHT (posn-y (meteor-cord meteor)) 0))) true]
    [else (colide-meteoro-algum-predio meteor (rest lsb))]))

(define (dentro? pnt-inf-esq height width coord)
  (cond
    [(and (< (posn-x pnt-inf-esq) (posn-x coord) (+ (posn-x pnt-inf-esq) width))
          (> (posn-y pnt-inf-esq) (posn-y coord) (- (posn-y pnt-inf-esq) height))) true]
    [else false]))

         
(define (colide-buildings lsm lsb)
  (local ( (define (colide-build build lsm)
             (cond
               [(empty? lsm) build]
               [(dentro? (make-posn (building-cordx build) MAX_HEIGHT) (building-height build) (building-weidth build) (meteor-cord (first lsm)))
                 (recalculate-build build (first lsm))]
               [else (colide-build build (rest lsm))]))
           (define (recalculate-build build meteor)
            (make-building (building-cordx build) (building-weidth build) (posn-y(meteor-cord meteor))  (building-color build) true)))
  (cond
    [(empty? lsb) empty]
    [else (cons(colide-build (first lsb) lsm) (colide-buildings lsm (rest lsb))) ])))

(define (simulation scenario)
  (cond
    [(empty? (scenario-lsm scenario)) (and (sleep-for-a-while 2) (stop))]
    [else (local ((define x(draw-scenario scenario)))(simulation (colidiu? scenario)))]))

(define LSM (list (make-meteor (make-posn 5 5) 10 1 2 'black)
                  (make-meteor (make-posn 480 320) 10 -1 -2 'black)
                  (make-meteor (make-posn 480 5) 10 0 2 'black)
                  (make-meteor (make-posn 250 250) 10 1 -1 'black)
                  (make-meteor (make-posn 10 1) 10 0 1 'black)
                  (make-meteor (make-posn 480 480) 10 -1 -2 'black)))
(define LSB (list (make-building 0 20 100 'blue false)     
                  (make-building 40 20 150 'blue false)
                  (make-building 80 20 80 'blue false)
                  (make-building 200 20 200 'blue false)
                  (make-building 300 20 50 'blue false)))

(define (meteoro-de-pegasus)(and
(start MAX_HEIGHT MAX_WIDTH)
(simulation (make-scenario LSM LSB))
))
